apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-flux-deployment
  labels:
    app.kubernetes.io/name: simple-flux-deployment
    app.kubernetes.io/environment: development
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: simple-flux-deployment
      app.kubernetes.io/environment: development
  template:
    metadata:
      labels:
        app.kubernetes.io/name: simple-flux-deployment
        app.kubernetes.io/environment: development
      annotations:
        app.kubernetes.io/sample-annotation: "annotation-for-simple-flux-deployment"
    spec:
      containers:
        # basic container details
        - name: simple-flux-container
          # never use reusable tags like latest or stable
          #image: docker.io/kylix3511/simple-go-app:2.5
          image: ghcr.io/w1593950/simple-go-app:2.5
          # hardcode the listening port if Dockerfile isn't set with EXPOSE
          ports:
            - containerPort: 8080
              protocol: TCP
          readinessProbe: # I always recommend using these, even if your app has no listening ports (this affects any rolling update)
            httpGet: # Lots of timeout values with defaults, be sure they are ideal for your workload
              path: /health
              port: 8080
          livenessProbe: # only needed if your app tends to go unresponsive or you don't have a readinessProbe, but this is up for debate
            httpGet: # Lots of timeout values with defaults, be sure they are ideal for your workload
              path: /health
              port: 8080
          resources: # Because if limits = requests then QoS is set to "Guaranteed"
            limits:
              memory: "50Mi" # If container uses over 50MB it is killed (OOM)
              cpu: 2m # Not normally needed, unless you need to protect other workloads or QoS must be "Guaranteed"
            requests:
              memory: "10Mi" # Scheduler finds a node where 10MB is available
              cpu: 1m # Scheduler finds a node where 1 vCPU is available
          # per-container security context
          # lock down privileges inside the container
          securityContext:
            allowPrivilegeEscalation: true # prevent sudo, etc.
            privileged: true # prevent acting like host root
      imagePullSecrets:
        - name: regcred
      terminationGracePeriodSeconds: 600 # default is 30, but you may need more time to gracefully shutdown (HTTP long polling, user uploads, etc)
      # per-pod security context
      # enable seccomp and force non-root user
      securityContext:
        seccompProfile:
          type: RuntimeDefault # enable seccomp and the runtimes default profile
        runAsUser: 1001 # hardcode user to non-root if not set in Dockerfile:0
        runAsGroup: 1001 # hardcode group to non-root if not set in Dockerfile
        runAsNonRoot: true # hardcode to non-root. Redundant to above if Dockerfile is set USER 1000
